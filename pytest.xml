<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="32" failures="3" skipped="0" tests="35" time="1.910" timestamp="2022-12-13T18:25:01.997530" hostname="fv-az257-312"><testcase classname="tests.unit_tests.test_authenticator" name="test_authenticator__access_token_from_refresh_token" time="0.035"><failure message="vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_authenticator__access_token_from_refresh_token.yaml') in your current record mode ('once').&#10;No match for the request (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&gt;) was found.&#10;Found 3 similar requests with 1 different matcher(s) :&#10;&#10;1 - (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&gt;).&#10;Matchers succeeded : ['method']&#10;Matchers failed :&#10;uri - assertion failure :&#10;https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&#10;&#10;2 - (&lt;Request (GET) https://dms.api.playstation.com/api/v1/devices/accounts/me&gt;).&#10;Matchers succeeded : ['method']&#10;Matchers failed :&#10;uri - assertion failure :&#10;https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://dms.api.playstation.com/api/v1/devices/accounts/me&#10;&#10;3 - (&lt;Request (GET) https://m.np.playstation.com/api/userProfile/v1/internal/users/8520698476712646544/profiles&gt;).&#10;Matchers succeeded : ['method']&#10;Matchers failed :&#10;uri - assertion failure :&#10;https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://m.np.playstation.com/api/userProfile/v1/internal/users/8520698476712646544/profiles">@pytest.mark.vcr()
    def test_authenticator__access_token_from_refresh_token():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
&gt;           psnawp = psnawp_api.psnawp.PSNAWP(os.getenv("NPSSO_CODE"))

tests/unit_tests/test_authenticator.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:117: in _authenticate
    response = requests.get(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:587: in request
    resp = self.send(prep, **send_kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:701: in send
    r = adapter.send(request, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/adapters.py:489: in send
    resp = conn.urlopen(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:703: in urlopen
    httplib_response = self._make_request(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:440: in _make_request
    httplib_response = conn.getresponse(buffering=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;vcr.patch.VCRRequestsHTTPSConnectiontests/unit_tests/cassettes/test_authenticator__access_token_from_refresh_token.yaml object at 0x7f526f943090&gt;
_ = False, kwargs = {'buffering': True}

    def getresponse(self, _=False, **kwargs):
        """Retrieve the response"""
        # Check to see if the cassette has a response for this request. If so,
        # then return it
        if self.cassette.can_play_response_for(self._vcr_request):
            log.info("Playing response for {} from cassette".format(self._vcr_request))
            response = self.cassette.play_response(self._vcr_request)
            return VCRHTTPResponse(response)
        else:
            if self.cassette.write_protected and self.cassette.filter_request(self._vcr_request):
&gt;               raise CannotOverwriteExistingCassetteException(
                    cassette=self.cassette, failed_request=self._vcr_request
                )
E               vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_authenticator__access_token_from_refresh_token.yaml') in your current record mode ('once').
E               No match for the request (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&gt;) was found.
E               Found 3 similar requests with 1 different matcher(s) :
E               
E               1 - (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&gt;).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code
E               
E               2 - (&lt;Request (GET) https://dms.api.playstation.com/api/v1/devices/accounts/me&gt;).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://dms.api.playstation.com/api/v1/devices/accounts/me
E               
E               3 - (&lt;Request (GET) https://m.np.playstation.com/api/userProfile/v1/internal/users/8520698476712646544/profiles&gt;).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://m.np.playstation.com/api/userProfile/v1/internal/users/8520698476712646544/profiles

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/vcr/stubs/__init__.py:231: CannotOverwriteExistingCassetteException</failure></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__authentication" time="0.023"><failure message="vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_client__authentication.yaml') in your current record mode ('once').&#10;No match for the request (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&gt;) was found.&#10;Found 1 similar requests with 1 different matcher(s) :&#10;&#10;1 - (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&gt;).&#10;Matchers succeeded : ['method']&#10;Matchers failed :&#10;uri - assertion failure :&#10;https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code">@pytest.mark.vcr()
    def test_client__authentication():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
&gt;           psnawp_api.psnawp.PSNAWP(os.getenv("NPSSO_CODE"))

tests/unit_tests/test_client.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:117: in _authenticate
    response = requests.get(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:587: in request
    resp = self.send(prep, **send_kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:701: in send
    r = adapter.send(request, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/adapters.py:489: in send
    resp = conn.urlopen(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:703: in urlopen
    httplib_response = self._make_request(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:440: in _make_request
    httplib_response = conn.getresponse(buffering=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;vcr.patch.VCRRequestsHTTPSConnectiontests/unit_tests/cassettes/test_client__authentication.yaml object at 0x7f526f598050&gt;
_ = False, kwargs = {'buffering': True}

    def getresponse(self, _=False, **kwargs):
        """Retrieve the response"""
        # Check to see if the cassette has a response for this request. If so,
        # then return it
        if self.cassette.can_play_response_for(self._vcr_request):
            log.info("Playing response for {} from cassette".format(self._vcr_request))
            response = self.cassette.play_response(self._vcr_request)
            return VCRHTTPResponse(response)
        else:
            if self.cassette.write_protected and self.cassette.filter_request(self._vcr_request):
&gt;               raise CannotOverwriteExistingCassetteException(
                    cassette=self.cassette, failed_request=self._vcr_request
                )
E               vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_client__authentication.yaml') in your current record mode ('once').
E               No match for the request (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&gt;) was found.
E               Found 1 similar requests with 1 different matcher(s) :
E               
E               1 - (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&gt;).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/vcr/stubs/__init__.py:231: CannotOverwriteExistingCassetteException</failure></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__incorrect_npsso" time="0.019"><failure message="vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_client__incorrect_npsso.yaml') in your current record mode ('once').&#10;No match for the request (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&gt;) was found.&#10;Found 1 similar requests with 1 different matcher(s) :&#10;&#10;1 - (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&gt;).&#10;Matchers succeeded : ['method']&#10;Matchers failed :&#10;uri - assertion failure :&#10;https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code">@pytest.mark.vcr()
    def test_client__incorrect_npsso():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
            with pytest.raises(PSNAWPAuthenticationError):
&gt;               psnawp_api.psnawp.PSNAWP("dsjfhsdkjfhskjdhlf")

tests/unit_tests/test_client.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:117: in _authenticate
    response = requests.get(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:587: in request
    resp = self.send(prep, **send_kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:701: in send
    r = adapter.send(request, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/adapters.py:489: in send
    resp = conn.urlopen(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:703: in urlopen
    httplib_response = self._make_request(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:440: in _make_request
    httplib_response = conn.getresponse(buffering=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;vcr.patch.VCRRequestsHTTPSConnectiontests/unit_tests/cassettes/test_client__incorrect_npsso.yaml object at 0x7f526f734a50&gt;
_ = False, kwargs = {'buffering': True}

    def getresponse(self, _=False, **kwargs):
        """Retrieve the response"""
        # Check to see if the cassette has a response for this request. If so,
        # then return it
        if self.cassette.can_play_response_for(self._vcr_request):
            log.info("Playing response for {} from cassette".format(self._vcr_request))
            response = self.cassette.play_response(self._vcr_request)
            return VCRHTTPResponse(response)
        else:
            if self.cassette.write_protected and self.cassette.filter_request(self._vcr_request):
&gt;               raise CannotOverwriteExistingCassetteException(
                    cassette=self.cassette, failed_request=self._vcr_request
                )
E               vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_client__incorrect_npsso.yaml') in your current record mode ('once').
E               No match for the request (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code&gt;) was found.
E               Found 1 similar requests with 1 different matcher(s) :
E               
E               1 - (&lt;Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code&gt;).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=09515159-7237-4370-9b40-3806e67c0891&amp;scope=psn%3Aclientapp+psn%3Amobile.v2.core&amp;redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&amp;response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&amp;client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&amp;scope=psn%3Aclientapp+psn%3Amobile.v1&amp;redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&amp;response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/vcr/stubs/__init__.py:231: CannotOverwriteExistingCassetteException</failure></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__online_id" time="0.669"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__account_id" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__get_profile_legacy" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__account_devices" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__get_friends" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__get_groups" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__available_to_play" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__blocked_list" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_client" name="test_client__repr_and_str" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__group_incorrect_args" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_wrong_id" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_users" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__group_with_id" time="0.006"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__repr_and_str" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__change_name_dm" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__dming_blocked_user" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__change_name" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_group" name="test_group__leave_group" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_search" name="test_search__universal_search" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_search" name="test_search__get_title_details" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_account_id" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_no_argument" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_wrong_acc_id" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__prev_online_id" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_not_found" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__user_acct_id_not_found" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__get_presence" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__get_presence_forbidden" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__friendship" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__is_blocked" time="0.001"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase><testcase classname="tests.unit_tests.test_user" name="test_user__repr_and_str" time="0.002"><error message="failed on setup with &quot;psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!&quot;">@pytest.fixture(scope="session")
    def psnawp_fixture():
&gt;       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0&gt;

    def _authenticate(self) -&gt; None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
&gt;               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError</error></testcase></testsuite></testsuites>