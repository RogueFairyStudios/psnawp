============================= test session starts ==============================
platform linux -- Python 3.11.0, pytest-7.1.3, pluggy-1.0.0
rootdir: /home/runner/work/psnawp/psnawp, configfile: pyproject.toml, testpaths: tests
plugins: cov-4.0.0, vcr-1.0.2
collected 35 items

tests/unit_tests/test_authenticator.py F                                 [  2%]
tests/unit_tests/test_client.py FFEEEEEEEEE                              [ 34%]
tests/unit_tests/test_group.py EEEEEEEEE                                 [ 60%]
tests/unit_tests/test_search.py EE                                       [ 65%]
tests/unit_tests/test_user.py EEEEEEEEEEEE                               [100%]

==================================== ERRORS ====================================
___________________ ERROR at setup of test_client__online_id ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
__________________ ERROR at setup of test_client__account_id ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
______________ ERROR at setup of test_client__get_profile_legacy _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
________________ ERROR at setup of test_client__account_devices ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
__________________ ERROR at setup of test_client__get_friends __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
__________________ ERROR at setup of test_client__get_groups ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_______________ ERROR at setup of test_client__available_to_play _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_________________ ERROR at setup of test_client__blocked_list __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_________________ ERROR at setup of test_client__repr_and_str __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
______________ ERROR at setup of test_group__group_incorrect_args ______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
______________ ERROR at setup of test_group__group_with_wrong_id _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
________________ ERROR at setup of test_group__group_with_users ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_________________ ERROR at setup of test_group__group_with_id __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
__________________ ERROR at setup of test_group__repr_and_str __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_________________ ERROR at setup of test_group__change_name_dm _________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_______________ ERROR at setup of test_group__dming_blocked_user _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
__________________ ERROR at setup of test_group__change_name ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
__________________ ERROR at setup of test_group__leave_group ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_______________ ERROR at setup of test_search__universal_search ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_______________ ERROR at setup of test_search__get_title_details _______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
______________________ ERROR at setup of test_user__user _______________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_________________ ERROR at setup of test_user__user_account_id _________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
________________ ERROR at setup of test_user__user_no_argument _________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
________________ ERROR at setup of test_user__user_wrong_acc_id ________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_________________ ERROR at setup of test_user__prev_online_id __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_________________ ERROR at setup of test_user__user_not_found __________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__user_acct_id_not_found ______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
__________________ ERROR at setup of test_user__get_presence ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
_____________ ERROR at setup of test_user__get_presence_forbidden ______________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__friendship ____________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
___________________ ERROR at setup of test_user__is_blocked ____________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
__________________ ERROR at setup of test_user__repr_and_str ___________________

    @pytest.fixture(scope="session")
    def psnawp_fixture():
>       return PSNAWP(os.getenv("NPSSO_CODE"))

tests/conftest.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <psnawp_api.core.authenticator.Authenticator object at 0x7f526f62ddd0>

    def _authenticate(self) -> None:
        """Authenticate using the npsso code provided in the constructor.
    
        Obtains the access code and the refresh code. Access code lasts about 1 hour.
        While the refresh code lasts about 2 months. After 2 months a new npsso code is
        needed.
    
        :raises: ``PSNAWPAuthenticationError`` If authentication is not successful.
    
        """
        cookies = {"Cookie": f"npsso={self._npsso_token}"}
        params = {
            "access_type": "offline",
            "client_id": Authenticator.__PARAMS["CLIENT_ID"],
            "scope": Authenticator.__PARAMS["SCOPE"],
            "redirect_uri": Authenticator.__PARAMS["REDIRECT_URI"],
            "response_type": "code",
        }
        response = requests.get(
            f"{BASE_PATH['base_uri']}{API_PATH['oauth_code']}",
            headers=cookies,
            params=params,
            allow_redirects=False,
        )
        response.raise_for_status()
        location_url = response.headers["location"]
        parsed_url = urlparse(location_url)
        parsed_query = parse_qs(parsed_url.query)
        if "error" in parsed_query.keys():
            if "4165" in parsed_query["error_code"]:
>               raise psnawp_exceptions.PSNAWPAuthenticationError(
                    "Your npsso code has expired or is incorrect. Please generate a new code!"
                )
E               psnawp_api.core.psnawp_exceptions.PSNAWPAuthenticationError: Your npsso code has expired or is incorrect. Please generate a new code!

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:129: PSNAWPAuthenticationError
=================================== FAILURES ===================================
_____________ test_authenticator__access_token_from_refresh_token ______________

    @pytest.mark.vcr()
    def test_authenticator__access_token_from_refresh_token():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
>           psnawp = psnawp_api.psnawp.PSNAWP(os.getenv("NPSSO_CODE"))

tests/unit_tests/test_authenticator.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:117: in _authenticate
    response = requests.get(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:587: in request
    resp = self.send(prep, **send_kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:701: in send
    r = adapter.send(request, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/adapters.py:489: in send
    resp = conn.urlopen(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:703: in urlopen
    httplib_response = self._make_request(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:440: in _make_request
    httplib_response = conn.getresponse(buffering=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vcr.patch.VCRRequestsHTTPSConnectiontests/unit_tests/cassettes/test_authenticator__access_token_from_refresh_token.yaml object at 0x7f526f943090>
_ = False, kwargs = {'buffering': True}

    def getresponse(self, _=False, **kwargs):
        """Retrieve the response"""
        # Check to see if the cassette has a response for this request. If so,
        # then return it
        if self.cassette.can_play_response_for(self._vcr_request):
            log.info("Playing response for {} from cassette".format(self._vcr_request))
            response = self.cassette.play_response(self._vcr_request)
            return VCRHTTPResponse(response)
        else:
            if self.cassette.write_protected and self.cassette.filter_request(self._vcr_request):
>               raise CannotOverwriteExistingCassetteException(
                    cassette=self.cassette, failed_request=self._vcr_request
                )
E               vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_authenticator__access_token_from_refresh_token.yaml') in your current record mode ('once').
E               No match for the request (<Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&scope=psn%3Aclientapp+psn%3Amobile.v2.core&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code>) was found.
E               Found 3 similar requests with 1 different matcher(s) :
E               
E               1 - (<Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&scope=psn%3Aclientapp+psn%3Amobile.v1&redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&response_type=code>).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&scope=psn%3Aclientapp+psn%3Amobile.v2.core&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&scope=psn%3Aclientapp+psn%3Amobile.v1&redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&response_type=code
E               
E               2 - (<Request (GET) https://dms.api.playstation.com/api/v1/devices/accounts/me>).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&scope=psn%3Aclientapp+psn%3Amobile.v2.core&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code != https://dms.api.playstation.com/api/v1/devices/accounts/me
E               
E               3 - (<Request (GET) https://m.np.playstation.com/api/userProfile/v1/internal/users/8520698476712646544/profiles>).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&scope=psn%3Aclientapp+psn%3Amobile.v2.core&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code != https://m.np.playstation.com/api/userProfile/v1/internal/users/8520698476712646544/profiles

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/vcr/stubs/__init__.py:231: CannotOverwriteExistingCassetteException
_________________________ test_client__authentication __________________________

    @pytest.mark.vcr()
    def test_client__authentication():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
>           psnawp_api.psnawp.PSNAWP(os.getenv("NPSSO_CODE"))

tests/unit_tests/test_client.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:117: in _authenticate
    response = requests.get(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:587: in request
    resp = self.send(prep, **send_kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:701: in send
    r = adapter.send(request, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/adapters.py:489: in send
    resp = conn.urlopen(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:703: in urlopen
    httplib_response = self._make_request(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:440: in _make_request
    httplib_response = conn.getresponse(buffering=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vcr.patch.VCRRequestsHTTPSConnectiontests/unit_tests/cassettes/test_client__authentication.yaml object at 0x7f526f598050>
_ = False, kwargs = {'buffering': True}

    def getresponse(self, _=False, **kwargs):
        """Retrieve the response"""
        # Check to see if the cassette has a response for this request. If so,
        # then return it
        if self.cassette.can_play_response_for(self._vcr_request):
            log.info("Playing response for {} from cassette".format(self._vcr_request))
            response = self.cassette.play_response(self._vcr_request)
            return VCRHTTPResponse(response)
        else:
            if self.cassette.write_protected and self.cassette.filter_request(self._vcr_request):
>               raise CannotOverwriteExistingCassetteException(
                    cassette=self.cassette, failed_request=self._vcr_request
                )
E               vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_client__authentication.yaml') in your current record mode ('once').
E               No match for the request (<Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&scope=psn%3Aclientapp+psn%3Amobile.v2.core&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code>) was found.
E               Found 1 similar requests with 1 different matcher(s) :
E               
E               1 - (<Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&scope=psn%3Aclientapp+psn%3Amobile.v1&redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&response_type=code>).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&scope=psn%3Aclientapp+psn%3Amobile.v2.core&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&scope=psn%3Aclientapp+psn%3Amobile.v1&redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/vcr/stubs/__init__.py:231: CannotOverwriteExistingCassetteException
_________________________ test_client__incorrect_npsso _________________________

    @pytest.mark.vcr()
    def test_client__incorrect_npsso():
        with my_vcr.use_cassette(f"{inspect.currentframe().f_code.co_name}.yaml"):
            with pytest.raises(PSNAWPAuthenticationError):
>               psnawp_api.psnawp.PSNAWP("dsjfhsdkjfhskjdhlf")

tests/unit_tests/test_client.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py:39: in __init__
    authenticator.Authenticator(npsso_cookie)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:36: in __init__
    self._authenticate()
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py:117: in _authenticate
    response = requests.get(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:73: in get
    return request("get", url, params=params, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:587: in request
    resp = self.send(prep, **send_kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/sessions.py:701: in send
    r = adapter.send(request, **kwargs)
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/requests/adapters.py:489: in send
    resp = conn.urlopen(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:703: in urlopen
    httplib_response = self._make_request(
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/urllib3/connectionpool.py:440: in _make_request
    httplib_response = conn.getresponse(buffering=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vcr.patch.VCRRequestsHTTPSConnectiontests/unit_tests/cassettes/test_client__incorrect_npsso.yaml object at 0x7f526f734a50>
_ = False, kwargs = {'buffering': True}

    def getresponse(self, _=False, **kwargs):
        """Retrieve the response"""
        # Check to see if the cassette has a response for this request. If so,
        # then return it
        if self.cassette.can_play_response_for(self._vcr_request):
            log.info("Playing response for {} from cassette".format(self._vcr_request))
            response = self.cassette.play_response(self._vcr_request)
            return VCRHTTPResponse(response)
        else:
            if self.cassette.write_protected and self.cassette.filter_request(self._vcr_request):
>               raise CannotOverwriteExistingCassetteException(
                    cassette=self.cassette, failed_request=self._vcr_request
                )
E               vcr.errors.CannotOverwriteExistingCassetteException: Can't overwrite existing cassette ('tests/unit_tests/cassettes/test_client__incorrect_npsso.yaml') in your current record mode ('once').
E               No match for the request (<Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&scope=psn%3Aclientapp+psn%3Amobile.v2.core&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code>) was found.
E               Found 1 similar requests with 1 different matcher(s) :
E               
E               1 - (<Request (GET) https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&scope=psn%3Aclientapp+psn%3Amobile.v1&redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&response_type=code>).
E               Matchers succeeded : ['method']
E               Matchers failed :
E               uri - assertion failure :
E               https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=09515159-7237-4370-9b40-3806e67c0891&scope=psn%3Aclientapp+psn%3Amobile.v2.core&redirect_uri=com.scee.psxandroid.scecompcall%3A%2F%2Fredirect&response_type=code != https://ca.account.sony.com/api/authz/v3/oauth/authorize?access_type=offline&client_id=ac8d161a-d966-4728-b0ea-ffec22f69edc&scope=psn%3Aclientapp+psn%3Amobile.v1&redirect_uri=com.playstation.PlayStationApp%3A%2F%2Fredirect&response_type=code

/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/vcr/stubs/__init__.py:231: CannotOverwriteExistingCassetteException
-------- generated xml file: /home/runner/work/psnawp/psnawp/pytest.xml --------

---------- coverage: platform linux, python 3.11.0-final-0 -----------
Name                                                                                                       Stmts   Miss  Cover
------------------------------------------------------------------------------------------------------------------------------
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/__init__.py                     1      0   100%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/__init__.py                0      0   100%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/authenticator.py          46     18    61%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/core/psnawp_exceptions.py       9      0   100%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/models/__init__.py              0      0   100%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/models/client.py               47     27    43%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/models/group.py                52     35    33%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/models/search.py               15      7    53%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/models/user.py                 72     53    26%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/psnawp.py                      30     12    60%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/utils/__init__.py               0      0   100%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/utils/endpoints.py              2      0   100%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/utils/misc.py                  13      9    31%
/opt/hostedtoolcache/Python/3.11.0/x64/lib/python3.11/site-packages/psnawp_api/utils/request_builder.py       71     59    17%
------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                        358    220    39%

=========================== short test summary info ============================
FAILED tests/unit_tests/test_authenticator.py::test_authenticator__access_token_from_refresh_token
FAILED tests/unit_tests/test_client.py::test_client__authentication - vcr.err...
FAILED tests/unit_tests/test_client.py::test_client__incorrect_npsso - vcr.er...
ERROR tests/unit_tests/test_client.py::test_client__online_id - psnawp_api.co...
ERROR tests/unit_tests/test_client.py::test_client__account_id - psnawp_api.c...
ERROR tests/unit_tests/test_client.py::test_client__get_profile_legacy - psna...
ERROR tests/unit_tests/test_client.py::test_client__account_devices - psnawp_...
ERROR tests/unit_tests/test_client.py::test_client__get_friends - psnawp_api....
ERROR tests/unit_tests/test_client.py::test_client__get_groups - psnawp_api.c...
ERROR tests/unit_tests/test_client.py::test_client__available_to_play - psnaw...
ERROR tests/unit_tests/test_client.py::test_client__blocked_list - psnawp_api...
ERROR tests/unit_tests/test_client.py::test_client__repr_and_str - psnawp_api...
ERROR tests/unit_tests/test_group.py::test_group__group_incorrect_args - psna...
ERROR tests/unit_tests/test_group.py::test_group__group_with_wrong_id - psnaw...
ERROR tests/unit_tests/test_group.py::test_group__group_with_users - psnawp_a...
ERROR tests/unit_tests/test_group.py::test_group__group_with_id - psnawp_api....
ERROR tests/unit_tests/test_group.py::test_group__repr_and_str - psnawp_api.c...
ERROR tests/unit_tests/test_group.py::test_group__change_name_dm - psnawp_api...
ERROR tests/unit_tests/test_group.py::test_group__dming_blocked_user - psnawp...
ERROR tests/unit_tests/test_group.py::test_group__change_name - psnawp_api.co...
ERROR tests/unit_tests/test_group.py::test_group__leave_group - psnawp_api.co...
ERROR tests/unit_tests/test_search.py::test_search__universal_search - psnawp...
ERROR tests/unit_tests/test_search.py::test_search__get_title_details - psnaw...
ERROR tests/unit_tests/test_user.py::test_user__user - psnawp_api.core.psnawp...
ERROR tests/unit_tests/test_user.py::test_user__user_account_id - psnawp_api....
ERROR tests/unit_tests/test_user.py::test_user__user_no_argument - psnawp_api...
ERROR tests/unit_tests/test_user.py::test_user__user_wrong_acc_id - psnawp_ap...
ERROR tests/unit_tests/test_user.py::test_user__prev_online_id - psnawp_api.c...
ERROR tests/unit_tests/test_user.py::test_user__user_not_found - psnawp_api.c...
ERROR tests/unit_tests/test_user.py::test_user__user_acct_id_not_found - psna...
ERROR tests/unit_tests/test_user.py::test_user__get_presence - psnawp_api.cor...
ERROR tests/unit_tests/test_user.py::test_user__get_presence_forbidden - psna...
ERROR tests/unit_tests/test_user.py::test_user__friendship - psnawp_api.core....
ERROR tests/unit_tests/test_user.py::test_user__is_blocked - psnawp_api.core....
ERROR tests/unit_tests/test_user.py::test_user__repr_and_str - psnawp_api.cor...
========================= 3 failed, 32 errors in 1.91s =========================
